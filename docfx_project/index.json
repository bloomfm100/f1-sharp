{
  "api/F1Sharp.Button.html": {
    "href": "api/F1Sharp.Button.html",
    "title": "Enum Button | F1Sharp",
    "keywords": "Enum Button Namespace F1Sharp Assembly F1Sharp.dll These flags are used in the telemetry packet to determine if any buttons are being held on the controlling device. If the value below logical ANDed with the button status is set then the corresponding button is being held. public enum Button : uint Fields CIRCLE_OR_B = 4 CROSS_OR_A = 1 DPAD_DOWN = 128 DPAD_LEFT = 16 DPAD_RIGHT = 32 DPAD_UP = 64 L1_OR_LB = 512 L2_OR_LT = 2048 LEFT_STICK_CLICK = 8192 OPTIONS_OR_MENU = 256 R1_OR_RB = 1024 R2_OR_RT = 4096 RIGHT_STICK_CLICK = 16384 RIGHT_STICK_DOWN = 262144 RIGHT_STICK_LEFT = 32768 RIGHT_STICK_RIGHT = 65536 RIGHT_STICK_UP = 131072 SPECIAL = 524288 SQUARE_OR_X = 8 TRIANGLE_OR_Y = 2 UDP_ACTION_1 = 1048576 UDP_ACTION_10 = 536870912 UDP_ACTION_11 = 1073741824 UDP_ACTION_12 = 2147483648 UDP_ACTION_2 = 2097152 UDP_ACTION_3 = 4194304 UDP_ACTION_4 = 8388608 UDP_ACTION_5 = 16777216 UDP_ACTION_6 = 33554432 UDP_ACTION_7 = 67108864 UDP_ACTION_8 = 134217728 UDP_ACTION_9 = 268435456"
  },
  "api/F1Sharp.Data.Buttons.html": {
    "href": "api/F1Sharp.Data.Buttons.html",
    "title": "Struct Buttons | F1Sharp",
    "keywords": "Struct Buttons Namespace F1Sharp.Data Assembly F1Sharp.dll Button event public struct Buttons Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields buttonStatus Bit flags specifying which buttons are being pressed currently public Button buttonStatus Field Value Button"
  },
  "api/F1Sharp.Data.CarDamageData.html": {
    "href": "api/F1Sharp.Data.CarDamageData.html",
    "title": "Struct CarDamageData | F1Sharp",
    "keywords": "Struct CarDamageData Namespace F1Sharp.Data Assembly F1Sharp.dll Car damage data public struct CarDamageData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields brakesDamage Brakes damage (percentage) public byte[] brakesDamage Field Value byte[] diffuserDamage Diffuser damage (percentage) public byte diffuserDamage Field Value byte drsFault Indicator for DRS fault 0 = OK; 1 = fault public byte drsFault Field Value byte engineBlown Indicates if the engine is blown 0 = OK; 1 = fault public byte engineBlown Field Value byte engineDamage Engine damage (percent) public byte engineDamage Field Value byte engineESWear Engine wear ES (percentage) public byte engineESWear Field Value byte engineICEWear Engine wear ICE (percentage) public byte engineICEWear Field Value byte engineMGUHWear Engine wear MGU-H (percentage) public byte engineMGUHWear Field Value byte engineMGUKWear Engine wear MGU-K (percentage) public byte engineMGUKWear Field Value byte engineSeized Indicates if the engine is seized 0 = OK; 1 = fault public byte engineSeized Field Value byte engineTcWear Engine wear TC (percentage) public byte engineTcWear Field Value byte ersFault Indicator for ERS fault 0 = OK; 1 = fault public byte ersFault Field Value byte floorDamage Floor damage (percentage) public byte floorDamage Field Value byte frontLeftWingDamage Front left wing damage (percentage) public byte frontLeftWingDamage Field Value byte frontRightWingDamage Front right wing damage (percentage) public byte frontRightWingDamage Field Value byte gearBoxDamage Gear box damage (percent) public byte gearBoxDamage Field Value byte rearWingDamage Rear wing damage (percentage) public byte rearWingDamage Field Value byte sidepodDamage Sidepod damage (percentage) public byte sidepodDamage Field Value byte tyresDamage Tyre damage (percentage) public byte[] tyresDamage Field Value byte[] tyresWear Tyre wear (percentage) public float[] tyresWear Field Value float[]"
  },
  "api/F1Sharp.Data.CarSetupData.html": {
    "href": "api/F1Sharp.Data.CarSetupData.html",
    "title": "Struct CarSetupData | F1Sharp",
    "keywords": "Struct CarSetupData Namespace F1Sharp.Data Assembly F1Sharp.dll Car setup data public struct CarSetupData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ballast Ballast public byte ballast Field Value byte brakeBias Brake bias (percent) public byte brakeBias Field Value byte brakePressure Brake pressure (percent) public byte brakePressure Field Value byte frontAntiRollBar Front anti-roll bar public byte frontAntiRollBar Field Value byte frontCamber Front camber angle public float frontCamber Field Value float frontLeftTyrePressure Frontleft tyre pressure (PSI) public float frontLeftTyrePressure Field Value float frontRightTyrePressure Front right tyre pressure (PSI) public float frontRightTyrePressure Field Value float frontSuspension Front suspension public byte frontSuspension Field Value byte frontSuspensionHeight Front ride height public byte frontSuspensionHeight Field Value byte frontToe Front toe angle public float frontToe Field Value float frontWing Front wing aero public byte frontWing Field Value byte fuelLoad Fuel load public byte fuelLoad Field Value byte offThrottle Differential adjustment off throttle (percentage) public byte offThrottle Field Value byte onThrottle Differential adjustment on throttle (percentage) public byte onThrottle Field Value byte rearAntiRollBar Rear anti-roll bar public byte rearAntiRollBar Field Value byte rearCamber Rear camber angle public float rearCamber Field Value float rearLeftTyrePressure Rear left tyre pressure (PSI) public float rearLeftTyrePressure Field Value float rearRightTyrePressure Rear Right tyre pressure (PSI) public float rearRightTyrePressure Field Value float rearSuspension Rear suspension public byte rearSuspension Field Value byte rearSuspensionHeight Rear ride height public byte rearSuspensionHeight Field Value byte rearToe Rear toe angle public float rearToe Field Value float rearWing Rear wing aero public byte rearWing Field Value byte"
  },
  "api/F1Sharp.Data.CarStatusData.html": {
    "href": "api/F1Sharp.Data.CarStatusData.html",
    "title": "Struct CarStatusData | F1Sharp",
    "keywords": "Struct CarStatusData Namespace F1Sharp.Data Assembly F1Sharp.dll Car status data public struct CarStatusData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields actualTyreCompound Tyre compound public TyreCompound actualTyreCompound Field Value TyreCompound antilockBrakes ABS status 0 = off; 1 = on public byte antilockBrakes Field Value byte drsActivationDistance Distance where DRS will be available 0 = not available; non-zero = distance in meters public ushort drsActivationDistance Field Value ushort drsAllowed Whether the DRS is allowed 0 = not allowed; 1 = allowed public byte drsAllowed Field Value byte enginePowerICE Engine power output of ICE in watts public float enginePowerICE Field Value float enginePowerMGUK Engine power output of MGU-K in watts public float enginePowerMGUK Field Value float ersDeployMode ERS deployment mode 0 = none; 1 = medium; 2 = hotlap; 3 = overtake public byte ersDeployMode Field Value byte ersDeployedThisLap ERS energy deployed this lap public float ersDeployedThisLap Field Value float ersHarvestedThisLapMGUH Energy harvested this lap by the MGU-H public float ersHarvestedThisLapMGUH Field Value float ersHarvestedThisLapMGUK Energy harvested this lap by the MGU-K public float ersHarvestedThisLapMGUK Field Value float ersStoreEnergy ERS energy store in joules public float ersStoreEnergy Field Value float frontBrakeBias Front brake bias (percentage) public byte frontBrakeBias Field Value byte fuelCapacity Fuel capacity public float fuelCapacity Field Value float fuelInTank Current fuel mass public float fuelInTank Field Value float fuelMix Current fuel mix 0 = lean; 1 = standard; 2 = rich; 3 = max public byte fuelMix Field Value byte fuelRemainingLaps Fuel remaining in terms of laps (value on MFD) public float fuelRemainingLaps Field Value float idleRPM Car's idle RPM public ushort idleRPM Field Value ushort maxGears Maximum number of gears public byte maxGears Field Value byte maxRPM Car's max RPM, point of rev limiter public ushort maxRPM Field Value ushort networkPaused Whether the car is paused in a network game public byte networkPaused Field Value byte pitLimiterStatus Pit limiter status 0 = off; 1 = on public byte pitLimiterStatus Field Value byte tractionControl Traction control level 0 = off; 1 = medium; 2 = full public byte tractionControl Field Value byte tyresAgeLaps Age in laps of current set of tyres public byte tyresAgeLaps Field Value byte vehicleFiaFlags Flags shown to the car public ZoneFlag vehicleFiaFlags Field Value ZoneFlag visualTyreCompound Visual tyre compound public VisualTyreCompound visualTyreCompound Field Value VisualTyreCompound"
  },
  "api/F1Sharp.Data.CarTelemetryData.html": {
    "href": "api/F1Sharp.Data.CarTelemetryData.html",
    "title": "Struct CarTelemetryData | F1Sharp",
    "keywords": "Struct CarTelemetryData Namespace F1Sharp.Data Assembly F1Sharp.dll Car telemetry data public struct CarTelemetryData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields brake Amount of brake applied (0..1) public float brake Field Value float brakesTemperature Brakes temperature in celsius public short[] brakesTemperature Field Value short[] clutch Amount of clutch applied (0..100) public byte clutch Field Value byte drs DRS active 0 = off; 1 = on public byte drs Field Value byte engineRPM Engine RPM public byte engineRPM Field Value byte engineTemperature Engine temperature in celsius public short engineTemperature Field Value short gear Gear selected -1 = R; 0 = N; 1-8 public sbyte gear Field Value sbyte revLightsBitValue Rev lights indicator (0-14) public short revLightsBitValue Field Value short revLightsPercent Rev lights indictor (percentage) public byte revLightsPercent Field Value byte speed Speed in kilometers per hour public uint speed Field Value uint steer Amount of steering applied (-1...1) 0 = neutral; -1 = full lock left; 1 = full lock right public float steer Field Value float surfaceType Driving surface public SurfaceType[] surfaceType Field Value SurfaceType[] throttle Amount of throttle applied (0..1) public float throttle Field Value float tyresInnerTemperature Tyres inner temperature in celsius public byte[] tyresInnerTemperature Field Value byte[] tyresSurfaceTemperature Tyres surface temperature in celsius public byte[] tyresSurfaceTemperature Field Value byte[]"
  },
  "api/F1Sharp.Data.DriveThroughPenaltyServed.html": {
    "href": "api/F1Sharp.Data.DriveThroughPenaltyServed.html",
    "title": "Struct DriveThroughPenaltyServed | F1Sharp",
    "keywords": "Struct DriveThroughPenaltyServed Namespace F1Sharp.Data Assembly F1Sharp.dll Drive through served event public struct DriveThroughPenaltyServed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car serving the drive through public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.EventDetails.html": {
    "href": "api/F1Sharp.Data.EventDetails.html",
    "title": "Struct EventDetails | F1Sharp",
    "keywords": "Struct EventDetails Namespace F1Sharp.Data Assembly F1Sharp.dll The event details packet is different for each type of event. public struct EventDetails Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields buttons public Buttons buttons Field Value Buttons driveThroughPenaltyServed public DriveThroughPenaltyServed driveThroughPenaltyServed Field Value DriveThroughPenaltyServed fastestLap public FastestLap fastestLap Field Value FastestLap flashback public Flashback flashback Field Value Flashback overtake public Overtake overtake Field Value Overtake penalty public Penalty penalty Field Value Penalty raceWinner public RaceWinner raceWinner Field Value RaceWinner retirement public Retirement retirement Field Value Retirement sppedTrap public SpeedTrap sppedTrap Field Value SpeedTrap startLights public StartLights startLights Field Value StartLights stopGoPenaltyServed public StopGoPenaltyServed stopGoPenaltyServed Field Value StopGoPenaltyServed teamMateInPits public TeamMateInPits teamMateInPits Field Value TeamMateInPits"
  },
  "api/F1Sharp.Data.FastestLap.html": {
    "href": "api/F1Sharp.Data.FastestLap.html",
    "title": "Struct FastestLap | F1Sharp",
    "keywords": "Struct FastestLap Namespace F1Sharp.Data Assembly F1Sharp.dll Fastest lap event public struct FastestLap Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields lapTime Lap time in seconds public float lapTime Field Value float vehicleIdx Index of the car that achieved the fastest lap public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.FinalClassificationData.html": {
    "href": "api/F1Sharp.Data.FinalClassificationData.html",
    "title": "Struct FinalClassificationData | F1Sharp",
    "keywords": "Struct FinalClassificationData Namespace F1Sharp.Data Assembly F1Sharp.dll Final classification data public struct FinalClassificationData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bestLapTimeInMS Best lap time of the session in milliseconds public uint bestLapTimeInMS Field Value uint gridPosition Starting grid position public byte gridPosition Field Value byte numLaps Number of laps completed public byte numLaps Field Value byte numPenalties Number of penalties applied to this driver public byte numPenalties Field Value byte numPitStops Number of pit stops made public byte numPitStops Field Value byte numTyreStings Number of tyre stints up to maximum public byte numTyreStings Field Value byte penaltiesTime Total penalties acumulated in seconds public byte penaltiesTime Field Value byte points Number of points scored public byte points Field Value byte position Finishing position public byte position Field Value byte resultStatus Result status public ResultStatus resultStatus Field Value ResultStatus totalRaceTime Total race time in seconds without penalties public double totalRaceTime Field Value double tyreStintsActual Actual tyres used by this driver public TyreCompound[] tyreStintsActual Field Value TyreCompound[] tyreStintsEndLaps The lap number the stints end on public byte[] tyreStintsEndLaps Field Value byte[] tyreStintsVisual Visual tyres used by this driver public VisualTyreCompound[] tyreStintsVisual Field Value VisualTyreCompound[]"
  },
  "api/F1Sharp.Data.Flashback.html": {
    "href": "api/F1Sharp.Data.Flashback.html",
    "title": "Struct Flashback | F1Sharp",
    "keywords": "Struct Flashback Namespace F1Sharp.Data Assembly F1Sharp.dll Flashback event public struct Flashback Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields flashbackFrameIdentifier Frame identifier flashed back to public uint flashbackFrameIdentifier Field Value uint flashbackSessionTime Session time flashed back to public float flashbackSessionTime Field Value float"
  },
  "api/F1Sharp.Data.html": {
    "href": "api/F1Sharp.Data.html",
    "title": "Namespace F1Sharp.Data | F1Sharp",
    "keywords": "Namespace F1Sharp.Data Structs Buttons Button event CarDamageData Car damage data CarSetupData Car setup data CarStatusData Car status data CarTelemetryData Car telemetry data DriveThroughPenaltyServed Drive through served event EventDetails The event details packet is different for each type of event. FastestLap Fastest lap event FinalClassificationData Final classification data Flashback Flashback event LapData Lap data for a car LapHistoryData Lap history data LobbyInfoData Data for player in lobby MarshalZone Data for the marshal zone MotionData Motion data for a car Overtake Overtake event ParticipantData Data for each participant Penalty Penalty event RaceWinner Race winner event Retirement Car retirement event SpeedTrap Speed trap event StartLights Start lights event StopGoPenaltyServed Stop & go served event TeamMateInPits Team mate in pits event TyreSetData Tyre set data TyreStintHistoryData Tyre stint history data WeatherForecastSample Data for the forecast sample"
  },
  "api/F1Sharp.Data.LapData.html": {
    "href": "api/F1Sharp.Data.LapData.html",
    "title": "Struct LapData | F1Sharp",
    "keywords": "Struct LapData Namespace F1Sharp.Data Assembly F1Sharp.dll Lap data for a car public struct LapData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carPosition Car race position public byte carPosition Field Value byte cornerCuttingWarnings Accumulated number of corner cutting warnings issued public byte cornerCuttingWarnings Field Value byte currentLapInvalid Indicates if the current lap is invalid 0 = valid; 1 = invalid public byte currentLapInvalid Field Value byte currentLapNum Current lap number public byte currentLapNum Field Value byte currentLapTimeInMS Current time around the lap in milliseconds public uint currentLapTimeInMS Field Value uint deltaToCarInFrontInMS Time delta to car in front in milliseconds public ushort deltaToCarInFrontInMS Field Value ushort deltaToRaceLeaderInMS Time delta to race leader in milliseconds public ushort deltaToRaceLeaderInMS Field Value ushort driverStatus Status of the driver public DriverStatus driverStatus Field Value DriverStatus gridPosition Grid position the car started the race in public byte gridPosition Field Value byte lapDistance Distance car is around the current lap in meters. Could be negative if line hasn't been crossed yet. public float lapDistance Field Value float lastLapTimeInMS Last lap time in milliseconds public uint lastLapTimeInMS Field Value uint numUnservedDriveThroughPens Number of drive through penalties left to serve public byte numUnservedDriveThroughPens Field Value byte numUnservedStopGoPens Number of stop & go penalties left to serve public byte numUnservedStopGoPens Field Value byte penalties Accumulated time penalties in seconds to be added public byte penalties Field Value byte pitLaneTimeInLaneInMS If timer is active, the current time spent in the pit lane in milliseconds public ushort pitLaneTimeInLaneInMS Field Value ushort pitLaneTimerActive Pit lane timing 0 = inactive; 1 = active public byte pitLaneTimerActive Field Value byte pitStatus Pit status of the car public PitStatus pitStatus Field Value PitStatus pitStopShouldServePen Whether the car should serve a penalty at this stop public byte pitStopShouldServePen Field Value byte pitStopTimerInMS Time of the actual pit stop in milliseconds public ushort pitStopTimerInMS Field Value ushort resultStatus Result of the driver public ResultStatus resultStatus Field Value ResultStatus safetyCarDelta Delta in seconds for safety car public float safetyCarDelta Field Value float sector Sector the car is in public Sector sector Field Value Sector sector1TimeInMS Sector 1 time in milliseconds public ushort sector1TimeInMS Field Value ushort sector1TimeMinutes Sector 1 whole minute part public byte sector1TimeMinutes Field Value byte sector2TimeInMS Sector 2 time in milliseconds public ushort sector2TimeInMS Field Value ushort sector2TimeMinutes Sector 2 whole minute part public ushort sector2TimeMinutes Field Value ushort totalDistance Total distance travelled in session in meters. Could be negative if line hasn't been crossed yet. public float totalDistance Field Value float totalWarnings Accumulated number of warnings issued public byte totalWarnings Field Value byte"
  },
  "api/F1Sharp.Data.LapHistoryData.html": {
    "href": "api/F1Sharp.Data.LapHistoryData.html",
    "title": "Struct LapHistoryData | F1Sharp",
    "keywords": "Struct LapHistoryData Namespace F1Sharp.Data Assembly F1Sharp.dll Lap history data public struct LapHistoryData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields lapTimeInMS Lap time in milliseconds public uint lapTimeInMS Field Value uint lapValidBitFlags Bit flags 0x01 bit set = lap valid; 0x02 bit set = sector 1 valid; 0x04 bit set = sector 2 valid; 0x08 bit set = sector 3 valid public byte lapValidBitFlags Field Value byte sector1TimeInMS Sector 1 time in milliseconds public ushort sector1TimeInMS Field Value ushort sector1TimeMinutes Sector 1 whole minute part public byte sector1TimeMinutes Field Value byte sector2TimeInMS Sector 2 time in milliseconds public ushort sector2TimeInMS Field Value ushort sector2TimeMinutes Sector 2 whole minute part public byte sector2TimeMinutes Field Value byte sector3TimeInMS Sector 3 time in milliseconds public ushort sector3TimeInMS Field Value ushort sector3TimeMinutes Sector 3 whole minute part public byte sector3TimeMinutes Field Value byte"
  },
  "api/F1Sharp.Data.LobbyInfoData.html": {
    "href": "api/F1Sharp.Data.LobbyInfoData.html",
    "title": "Struct LobbyInfoData | F1Sharp",
    "keywords": "Struct LobbyInfoData Namespace F1Sharp.Data Assembly F1Sharp.dll Data for player in lobby public struct LobbyInfoData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aiControlled Whether the vehicle is controlled by the AI (1) or the human (0) public byte aiControlled Field Value byte carNumber Number of the car public byte carNumber Field Value byte name Name of the player public char[] name Field Value char[] nationality Nationality public byte nationality Field Value byte platform Platform of the player public Platform platform Field Value Platform readyStatus Ready status 0 = not ready; 1 = ready; 2 = spectating public byte readyStatus Field Value byte teamId Team ID public byte teamId Field Value byte"
  },
  "api/F1Sharp.Data.MarshalZone.html": {
    "href": "api/F1Sharp.Data.MarshalZone.html",
    "title": "Struct MarshalZone | F1Sharp",
    "keywords": "Struct MarshalZone Namespace F1Sharp.Data Assembly F1Sharp.dll Data for the marshal zone public struct MarshalZone Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields zoneFlag Flag currently displayed on the zone public ZoneFlag zoneFlag Field Value ZoneFlag zoneStart Fraction (0..1) of the way through the lap the marshall zone starts public float zoneStart Field Value float"
  },
  "api/F1Sharp.Data.MotionData.html": {
    "href": "api/F1Sharp.Data.MotionData.html",
    "title": "Struct MotionData | F1Sharp",
    "keywords": "Struct MotionData Namespace F1Sharp.Data Assembly F1Sharp.dll Motion data for a car public struct MotionData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields gForceLateral Lateral G-Force component public float gForceLateral Field Value float gForceLongitudinal Longitudinal G-Force component public float gForceLongitudinal Field Value float gForceVertical Vertical G-Force component public float gForceVertical Field Value float pitch Pitch angle (in radians) public float pitch Field Value float roll Roll angle (in radians) public float roll Field Value float worldForwardDirX World space forward X direction (normalised) public short worldForwardDirX Field Value short worldForwardDirY World space forward Y direction (normalised) public short worldForwardDirY Field Value short worldForwardDirZ World space forward Z direction (normalised) public short worldForwardDirZ Field Value short worldPositionX World space X position (in meters) public float worldPositionX Field Value float worldPositionY World space Y position (in meters) public float worldPositionY Field Value float worldPositionZ World space Z position (in meters) public float worldPositionZ Field Value float worldRightDirX World space right X direction (normalised) public short worldRightDirX Field Value short worldRightDirY World space right Y direction (normalised) public short worldRightDirY Field Value short worldRightDirZ World space right Z direction (normalised) public short worldRightDirZ Field Value short worldVelocityX Velocity in world space X (in meters per second) public float worldVelocityX Field Value float worldVelocityY Velocity in world space Y (in meters per second) public float worldVelocityY Field Value float worldVelocityZ Velocity in world space Z (in meters per second) public float worldVelocityZ Field Value float yaw Yaw angle (in radians) public float yaw Field Value float"
  },
  "api/F1Sharp.Data.Overtake.html": {
    "href": "api/F1Sharp.Data.Overtake.html",
    "title": "Struct Overtake | F1Sharp",
    "keywords": "Struct Overtake Namespace F1Sharp.Data Assembly F1Sharp.dll Overtake event public struct Overtake Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields beingOvertakenVehicleIdx Index of the car being overtaken public byte beingOvertakenVehicleIdx Field Value byte overtakingVehicleIdx Index of the car overtaking public byte overtakingVehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.ParticipantData.html": {
    "href": "api/F1Sharp.Data.ParticipantData.html",
    "title": "Struct ParticipantData | F1Sharp",
    "keywords": "Struct ParticipantData Namespace F1Sharp.Data Assembly F1Sharp.dll Data for each participant public struct ParticipantData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aiControlled Whether the car is controlled by the AI (1) or the human (0) public byte aiControlled Field Value byte driverId Driver ID. 255 if network human. public byte driverId Field Value byte myTeam Whether it's My Team (1) or otherwise (0) public byte myTeam Field Value byte name Name of the participant public char[] name Field Value char[] nationality Nationality of the driver public byte nationality Field Value byte networkId Unique identifier for network players public byte networkId Field Value byte platform Platform of the player public Platform platform Field Value Platform raceNumber Race number of the car public byte raceNumber Field Value byte showOnlineNames Player's \"show online names\" setting 0 = off; 1 = on public byte showOnlineNames Field Value byte teamId Team ID public byte teamId Field Value byte yourTelemetry Player's UDP setting 0 = restricted; 1 = public public byte yourTelemetry Field Value byte"
  },
  "api/F1Sharp.Data.Penalty.html": {
    "href": "api/F1Sharp.Data.Penalty.html",
    "title": "Struct Penalty | F1Sharp",
    "keywords": "Struct Penalty Namespace F1Sharp.Data Assembly F1Sharp.dll Penalty event public struct Penalty Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields infringementType Infringement type public byte infringementType Field Value byte lapNum Lap the penalty ocurred on public byte lapNum Field Value byte otherVehicleIdx Index of the other car involved public byte otherVehicleIdx Field Value byte penaltyType Penalty type public byte penaltyType Field Value byte placesGained Number of places gained by this public byte placesGained Field Value byte time Time gained or time spent doing action in seconds public byte time Field Value byte vehicleIdx Index of the car the penalty is applied to public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.RaceWinner.html": {
    "href": "api/F1Sharp.Data.RaceWinner.html",
    "title": "Struct RaceWinner | F1Sharp",
    "keywords": "Struct RaceWinner Namespace F1Sharp.Data Assembly F1Sharp.dll Race winner event public struct RaceWinner Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car that won the race public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.Retirement.html": {
    "href": "api/F1Sharp.Data.Retirement.html",
    "title": "Struct Retirement | F1Sharp",
    "keywords": "Struct Retirement Namespace F1Sharp.Data Assembly F1Sharp.dll Car retirement event public struct Retirement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car retiring public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.SpeedTrap.html": {
    "href": "api/F1Sharp.Data.SpeedTrap.html",
    "title": "Struct SpeedTrap | F1Sharp",
    "keywords": "Struct SpeedTrap Namespace F1Sharp.Data Assembly F1Sharp.dll Speed trap event public struct SpeedTrap Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fastestSpeedInSession Speed of the fastest car in the session public float fastestSpeedInSession Field Value float fastestVehicleIdxInSession Index of the fastest car in the session public byte fastestVehicleIdxInSession Field Value byte isDriverFastestInSession Fastest speed for driver in session 1 = in session; 0 = otherwise public byte isDriverFastestInSession Field Value byte isOverallFastestInSession Overall fastest speed in session 1 = in session; 0 = otherwise public byte isOverallFastestInSession Field Value byte speed Top speed achieved in kilometers per hour public float speed Field Value float vehicleIdx Index of the car triggering the event public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.StartLights.html": {
    "href": "api/F1Sharp.Data.StartLights.html",
    "title": "Struct StartLights | F1Sharp",
    "keywords": "Struct StartLights Namespace F1Sharp.Data Assembly F1Sharp.dll Start lights event public struct StartLights Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields numLights Number of lights showing public byte numLights Field Value byte"
  },
  "api/F1Sharp.Data.StopGoPenaltyServed.html": {
    "href": "api/F1Sharp.Data.StopGoPenaltyServed.html",
    "title": "Struct StopGoPenaltyServed | F1Sharp",
    "keywords": "Struct StopGoPenaltyServed Namespace F1Sharp.Data Assembly F1Sharp.dll Stop & go served event public struct StopGoPenaltyServed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car serving the stop & go public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.TeamMateInPits.html": {
    "href": "api/F1Sharp.Data.TeamMateInPits.html",
    "title": "Struct TeamMateInPits | F1Sharp",
    "keywords": "Struct TeamMateInPits Namespace F1Sharp.Data Assembly F1Sharp.dll Team mate in pits event public struct TeamMateInPits Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car in pits public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Data.TyreSetData.html": {
    "href": "api/F1Sharp.Data.TyreSetData.html",
    "title": "Struct TyreSetData | F1Sharp",
    "keywords": "Struct TyreSetData Namespace F1Sharp.Data Assembly F1Sharp.dll Tyre set data public struct TyreSetData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields actualTyreCompound Actual tyre compound used public TyreCompound actualTyreCompound Field Value TyreCompound available Whether this set is currently available public byte available Field Value byte fitted Whether the set is fitted or not public byte fitted Field Value byte lapDeltaTime Lap delta time in milliseconds compared to fitted set public byte lapDeltaTime Field Value byte lifeSpan Laps left in this tyre set public byte lifeSpan Field Value byte recommendedSession Recommended session for tyre set public byte recommendedSession Field Value byte usableLife Max number of laps recommended for this compound public byte usableLife Field Value byte visualTyreCompund Visual tyre compound used public VisualTyreCompound visualTyreCompund Field Value VisualTyreCompound wear Tyre wear (percentage) public byte wear Field Value byte"
  },
  "api/F1Sharp.Data.TyreStintHistoryData.html": {
    "href": "api/F1Sharp.Data.TyreStintHistoryData.html",
    "title": "Struct TyreStintHistoryData | F1Sharp",
    "keywords": "Struct TyreStintHistoryData Namespace F1Sharp.Data Assembly F1Sharp.dll Tyre stint history data public struct TyreStintHistoryData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields endLap Lap the tyre usage ends on public byte endLap Field Value byte tyreActualCompound Actual tyres used by the driver public TyreCompound tyreActualCompound Field Value TyreCompound tyreVisualCompound Visual tyres used by the driver public VisualTyreCompound tyreVisualCompound Field Value VisualTyreCompound"
  },
  "api/F1Sharp.Data.WeatherForecastSample.html": {
    "href": "api/F1Sharp.Data.WeatherForecastSample.html",
    "title": "Struct WeatherForecastSample | F1Sharp",
    "keywords": "Struct WeatherForecastSample Namespace F1Sharp.Data Assembly F1Sharp.dll Data for the forecast sample public struct WeatherForecastSample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields airTemperature Air temperature in degrees Celsius public sbyte airTemperature Field Value sbyte rainPercentage Air temperature change. 0 = up; 1 = down; 2 = no change public byte rainPercentage Field Value byte sessionType Type of the session public Session sessionType Field Value Session timeOffset Time in minutes the forecast is for public byte timeOffset Field Value byte trackTemperature Track temperature in degrees Celsius public sbyte trackTemperature Field Value sbyte trackTemperatureChange Track temperature change. 0 = up; 1 = down; 2 = no change public sbyte trackTemperatureChange Field Value sbyte weather Weather type public Weather weather Field Value Weather"
  },
  "api/F1Sharp.DriverStatus.html": {
    "href": "api/F1Sharp.DriverStatus.html",
    "title": "Enum DriverStatus | F1Sharp",
    "keywords": "Enum DriverStatus Namespace F1Sharp Assembly F1Sharp.dll Identifier for the status of the driver public enum DriverStatus : byte Fields FLYING_LAP = 1 Flying lap IN_GARAGE = 0 In garage IN_LAP = 2 In lap ON_TRACK = 4 On track OUT_LAP = 3 Out lap"
  },
  "api/F1Sharp.Formula.html": {
    "href": "api/F1Sharp.Formula.html",
    "title": "Enum Formula | F1Sharp",
    "keywords": "Enum Formula Namespace F1Sharp Assembly F1Sharp.dll Codes for the car types public enum Formula : byte Fields BETA = 4 Beta ESPORTS = 6 ESports cars F1_CLASSIC = 1 Classic F1 cars F1_GENERIC = 3 Generic F1 F1_MODERN = 0 Modern F1 cars F2 = 2 F2 cars F2_2021 = 7 F2 2021 cars SUPERCARS = 5 Supercars"
  },
  "api/F1Sharp.GameMode.html": {
    "href": "api/F1Sharp.GameMode.html",
    "title": "Enum GameMode | F1Sharp",
    "keywords": "Enum GameMode Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the game modes public enum GameMode : byte Fields BENCHMARK = 127 CAREER_22 = 19 CAREER_22_ONLINE = 20 CAREER_INVITATIONAL = 11 CHAMPIONSHIP = 13 CHAMPIONSHIP_INVITATIONAL = 12 EVENT_MODE = 0 GRAND_PRIX = 3 ONLINE_CHAMPIONSHIP = 14 ONLINE_CUSTOM = 7 ONLINE_LEAGUE = 8 ONLINE_WEEKLY_EVENT = 15 SPLITSCREEN = 6 TIME_TRIAL = 5"
  },
  "api/F1Sharp.html": {
    "href": "api/F1Sharp.html",
    "title": "Namespace F1Sharp | F1Sharp",
    "keywords": "Namespace F1Sharp Classes TelemetryClient Structs PacketHeader Every packet sent by the game has this header Enums Button These flags are used in the telemetry packet to determine if any buttons are being held on the controlling device. If the value below logical ANDed with the button status is set then the corresponding button is being held. DriverStatus Identifier for the status of the driver Formula Codes for the car types GameMode Identifiers for the game modes InfringementType Identifier for infringement type MfdPanelIndex Identifier for MFD panel position Packet Identifiers for the packets PenaltyType Identifier for the penalty types PitStatus Identifier for the pit status Platform Identifier for the player's platform ResultStatus Identifier for the result status RuleSet Identifiers for the rule sets SafetyCarStatus Status code for the Safety Car Sector Identifier for the sectors Session Codes for the type of the sessions SessionLength Identifiers for the session length SpeedUnit Identifiers for the speed units SurfaceType Identifier for surface types TemperatureUnit Identifier for the temperature units Track Identifiers for the tracks TyreCompound Actual tyre compounds VisualTyreCompound Visual tyre compound Weather Codes for the weather Wheel Array position of the wheels ZoneFlag Codes for the flags displayed Delegates TelemetryClient.CarDamageDataReceiveDelegate TelemetryClient.CarSetupDataReceiveDelegate TelemetryClient.CarStatusDataReceiveDelegate TelemetryClient.CarTelemetryDataReceiveDelegate TelemetryClient.ConnectedStatusChangeDelegate Connection status change delegate TelemetryClient.EventDetailsReceiveDelegate TelemetryClient.FinalClassificationDataReceiveDelegate TelemetryClient.LapDataReceiveDelegate TelemetryClient.LobbyInfoDataReceiveDelegate TelemetryClient.MotionDataReceiveDelegate TelemetryClient.MotionExDataReceiveDelegate TelemetryClient.ParticipantsDataReceiveDelegate TelemetryClient.SessionDataReceiveDelegate TelemetryClient.SessionHistoryDataReceiveDelegate TelemetryClient.TyreSetDataReceiveDelegate"
  },
  "api/F1Sharp.InfringementType.html": {
    "href": "api/F1Sharp.InfringementType.html",
    "title": "Enum InfringementType | F1Sharp",
    "keywords": "Enum InfringementType Namespace F1Sharp Assembly F1Sharp.dll Identifier for infringement type public enum InfringementType : byte Fields APPROACHING_DISQUALIFICATION = 22 ATTRIBUTE_ASSIGNED = 54 BIG_COLLISION = 3 BLACK_FLAG_TIMER = 44 BLOCKING_PITLANE = 33 BLOCKING_SLOW_DRIVING = 0 BLOCKING_WRONG_WAY = 1 CORNER_CUTTING_GAINED_TIME = 7 CORNER_CUTTING_OVERTAKE_MULTIPLE = 9 CORNER_CUTTING_OVERTAKE_SINGLE = 8 CORNER_CUTTING_RAN_WIDE_GAINED_TIME_EXTREME = 29 CORNER_CUTTING_RAN_WIDE_GAINED_TIME_MINOR = 27 CORNER_CUTTING_RAN_WIDE_GAINED_TIME_SIGNIFICANT = 28 CROSSED_PIT_EXIT_LANE = 10 DRIVE_THROUGH_REMINDER_SERVE_NOW = 16 DRIVE_THROUGH_REMINDER_SERVE_WITHING = 15 ENGINE_COMPONENT_CHANGE = 47 FAILED_TO_HAND_BACK_POSITION_MULTIPLE = 6 FAILED_TO_HAND_BACK_POSITION_SINGLE = 5 FORMATION_LAP_PARKING = 40 FORMATION_LAP_SLOW = 39 GEARBOX_CHANGE = 48 IGNORING_BLUE_FLAGS = 11 IGNORING_DRIVE_THROUGH = 13 IGNORING_TYRE_REGULATIONS = 19 IGNORING_YELLOW_FLAGS = 12 ILLEGAL_TIME_GAIN = 52 JUMP_START = 34 LAP_INVALIDATED_CORNER_CUTTING = 25 LAP_INVALIDATED_FLASHBACK_USED = 31 LAP_INVALIDATED_RESET_TO_TRACK = 32 LAP_INVALIDATED_RUNNING_WIDE = 26 LAP_INVALIDATED_WALL_RIDING = 30 LEAGUE_GRID_PENALTY = 50 MANDATORY_PIT_STOP = 53 MULTIPLE_WARNINGS = 21 PARC_FERME_CHANGE = 49 PARKED_FOR_TOO_LONG = 18 PIT_LANE_SPEEDING = 17 RETIRED_MECHANICAL_FAILURE = 41 RETIRED_TERMINALLY_DAMAGED = 42 RETRY_PENALTY = 51 REVERSING_START_LINE = 2 SAFETY_CAR_COLLISION = 35 SAFETY_CAR_EXCEEDING_PACE = 37 SAFETY_CAR_FALLING_TOO_FAR_BACK = 43 SAFETY_CAR_ILLEGAL_OVERTAKE = 36 SMALL_COLLISION = 4 TOO_MANY_DRIVE_THROUGHS = 14 TOO_MANY_PENALTIES = 20 TYRE_REGULATIONS_SELECT_MULTIPLE = 24 TYRE_REGULATIONS_SELECT_SINGLE = 23 UNSERVED_DRIVE_THROUGH = 46 UNSERVED_STOP_GO = 45 VIRTUAL_SAFETY_CAR_EXCEEDING_PACE = 38"
  },
  "api/F1Sharp.MfdPanelIndex.html": {
    "href": "api/F1Sharp.MfdPanelIndex.html",
    "title": "Enum MfdPanelIndex | F1Sharp",
    "keywords": "Enum MfdPanelIndex Namespace F1Sharp Assembly F1Sharp.dll Identifier for MFD panel position public enum MfdPanelIndex : byte Fields CAR_SETUP = 0 CLOSED = 255 DAMAGE = 2 ENGINE = 3 PITS = 1 TEMPERATURES = 4"
  },
  "api/F1Sharp.Packet.html": {
    "href": "api/F1Sharp.Packet.html",
    "title": "Enum Packet | F1Sharp",
    "keywords": "Enum Packet Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the packets public enum Packet : byte Fields CAR_DAMAGE = 10 Damage status for all cars CAR_SETUPS = 5 Packet detailing car setups for cars in the race CAR_STATUS = 7 Status data for all cars CAR_TELEMETRY = 6 Telemetry data for all cars EVENT = 3 Various notable events that happen during a session FINAL_CLASSIFICATION = 8 Final classification confirmation at the end of a race LAP_DATA = 2 Data about all the lap times of cars in the session LOBBY_INFO = 9 Information about players in a multiplayer lobby MOTION = 0 Contains all motion data for player’s car – only sent while player is in control MOTION_EX = 13 Extended motion data for player car PARTICIPANTS = 4 List of participants in the session, mostly relevant for multiplayer SESSION = 1 Data about the session – track, time left SESSION_HISTORY = 11 Lap and tyre data for session TYRE_SET = 12 Extended tyre set data"
  },
  "api/F1Sharp.PacketHeader.html": {
    "href": "api/F1Sharp.PacketHeader.html",
    "title": "Struct PacketHeader | F1Sharp",
    "keywords": "Struct PacketHeader Namespace F1Sharp Assembly F1Sharp.dll Every packet sent by the game has this header public struct PacketHeader Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields frameIdentifier Identifier for the frame the data was retrieved from public uint frameIdentifier Field Value uint gameMajorVersion Game major version public byte gameMajorVersion Field Value byte gameMinorVersion Game minor version public byte gameMinorVersion Field Value byte gameYear Last two digits of the game year public byte gameYear Field Value byte overallFrameIdentifier Overall identifier for the frame the data was retrieved from (doesn't go back after flashbacks) public uint overallFrameIdentifier Field Value uint packetFormat Format of the packet. 2023 is the current one. public ushort packetFormat Field Value ushort packetId Identifier for the packet type public Packet packetId Field Value Packet packetVersion Version of this packet type public byte packetVersion Field Value byte playerCarIndex Index of the player's car in the car array public byte playerCarIndex Field Value byte secondaryPlayerCarIndex Index of the secondary player's car in the car array (splitscreen). 255 if no second player public byte secondaryPlayerCarIndex Field Value byte sessionTime Session timestamp public float sessionTime Field Value float sessionUID Unique identifier for the session public ulong sessionUID Field Value ulong"
  },
  "api/F1Sharp.Packets.Buttons.html": {
    "href": "api/F1Sharp.Packets.Buttons.html",
    "title": "Struct Buttons | F1Sharp",
    "keywords": "Struct Buttons Namespace F1Sharp.Packets Assembly F1Sharp.dll Button event public struct Buttons Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields buttonStatus Bit flags specifying which buttons are being pressed currently public Button buttonStatus Field Value Button"
  },
  "api/F1Sharp.Packets.CarDamagePacket.html": {
    "href": "api/F1Sharp.Packets.CarDamagePacket.html",
    "title": "Struct CarDamagePacket | F1Sharp",
    "keywords": "Struct CarDamagePacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet details car damage parameters for all the cars in the race. public struct CarDamagePacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carDamageData List of damages of all cars public CarDamageData[] carDamageData Field Value CarDamageData[] header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.CarSetupData.html": {
    "href": "api/F1Sharp.Packets.CarSetupData.html",
    "title": "Struct CarSetupData | F1Sharp",
    "keywords": "Struct CarSetupData Namespace F1Sharp.Packets Assembly F1Sharp.dll Car setup data public struct CarSetupData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ballast Ballast public byte ballast Field Value byte brakeBias Brake bias (percent) public byte brakeBias Field Value byte brakePressure Brake pressure (percent) public byte brakePressure Field Value byte frontAntiRollBar Front anti-roll bar public byte frontAntiRollBar Field Value byte frontCamber Front camber angle public float frontCamber Field Value float frontLeftTyrePressure Frontleft tyre pressure (PSI) public float frontLeftTyrePressure Field Value float frontRightTyrePressure Front right tyre pressure (PSI) public float frontRightTyrePressure Field Value float frontSuspension Front suspension public byte frontSuspension Field Value byte frontSuspensionHeight Front ride height public byte frontSuspensionHeight Field Value byte frontToe Front toe angle public float frontToe Field Value float frontWing Front wing aero public byte frontWing Field Value byte fuelLoad Fuel load public byte fuelLoad Field Value byte offThrottle Differential adjustment off throttle (percentage) public byte offThrottle Field Value byte onThrottle Differential adjustment on throttle (percentage) public byte onThrottle Field Value byte rearAntiRollBar Rear anti-roll bar public byte rearAntiRollBar Field Value byte rearCamber Rear camber angle public float rearCamber Field Value float rearLeftTyrePressure Rear left tyre pressure (PSI) public float rearLeftTyrePressure Field Value float rearRightTyrePressure Rear Right tyre pressure (PSI) public float rearRightTyrePressure Field Value float rearSuspension Rear suspension public byte rearSuspension Field Value byte rearSuspensionHeight Rear ride height public byte rearSuspensionHeight Field Value byte rearToe Rear toe angle public float rearToe Field Value float rearWing Rear wing aero public byte rearWing Field Value byte"
  },
  "api/F1Sharp.Packets.CarSetupPacket.html": {
    "href": "api/F1Sharp.Packets.CarSetupPacket.html",
    "title": "Struct CarSetupPacket | F1Sharp",
    "keywords": "Struct CarSetupPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet details the car setups for each vehicle in the session. Note that in multiplayer games, other player cars will appear as blank, you will only be able to see your own car setup, regardless of the “Your Telemetry” setting. Spectators will also not be able to see any car setups. public struct CarSetupPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carSetups List of car setups public CarSetupData[] carSetups Field Value CarSetupData[] header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.CarStatusPacket.html": {
    "href": "api/F1Sharp.Packets.CarStatusPacket.html",
    "title": "Struct CarStatusPacket | F1Sharp",
    "keywords": "Struct CarStatusPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet details car statuses for all the cars in the race. public struct CarStatusPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carStatusData List of car statuses public CarStatusData[] carStatusData Field Value CarStatusData[] header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.CarTelemetryData.html": {
    "href": "api/F1Sharp.Packets.CarTelemetryData.html",
    "title": "Struct CarTelemetryData | F1Sharp",
    "keywords": "Struct CarTelemetryData Namespace F1Sharp.Packets Assembly F1Sharp.dll Car telemetry data public struct CarTelemetryData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields brake Amount of brake applied (0..1) public float brake Field Value float brakesTemperature Brakes temperature in celsius public short[] brakesTemperature Field Value short[] clutch Amount of clutch applied (0..100) public byte clutch Field Value byte drs DRS active 0 = off; 1 = on public byte drs Field Value byte engineRPM Engine RPM public byte engineRPM Field Value byte engineTemperature Engine temperature in celsius public short engineTemperature Field Value short gear Gear selected -1 = R; 0 = N; 1-8 public sbyte gear Field Value sbyte revLightsBitValue Rev lights indicator (0-14) public short revLightsBitValue Field Value short revLightsPercent Rev lights indictor (percentage) public byte revLightsPercent Field Value byte speed Speed in kilometers per hour public uint speed Field Value uint steer Amount of steering applied (-1...1) 0 = neutral; -1 = full lock left; 1 = full lock right public float steer Field Value float surfaceType Driving surface public SurfaceType[] surfaceType Field Value SurfaceType[] throttle Amount of throttle applied (0..1) public float throttle Field Value float tyresInnerTemperature Tyres inner temperature in celsius public byte[] tyresInnerTemperature Field Value byte[] tyresSurfaceTemperature Tyres surface temperature in celsius public byte[] tyresSurfaceTemperature Field Value byte[]"
  },
  "api/F1Sharp.Packets.CarTelemetryPacket.html": {
    "href": "api/F1Sharp.Packets.CarTelemetryPacket.html",
    "title": "Struct CarTelemetryPacket | F1Sharp",
    "keywords": "Struct CarTelemetryPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet details telemetry for all the cars in the race. It details various values that would be recorded on the car such as speed, throttle application, DRS etc. Note that the rev light configurations are presented separately as well and will mimic real life driver preferences. public struct CarTelemetryPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carTelemetryData List of car telemetry data public CarTelemetryData[] carTelemetryData Field Value CarTelemetryData[] header Packet header public PacketHeader header Field Value PacketHeader mfdPanelIndex Index of the MFD panel showing for the player public MfdPanelIndex mfdPanelIndex Field Value MfdPanelIndex mfdPanelIndexSecondaryPlayer Index of the MFD panel showing for the secondary player (splitscreen) public MfdPanelIndex mfdPanelIndexSecondaryPlayer Field Value MfdPanelIndex suggestedGear Suggested gear for the player public sbyte suggestedGear Field Value sbyte"
  },
  "api/F1Sharp.Packets.DriveThroughPenaltyServed.html": {
    "href": "api/F1Sharp.Packets.DriveThroughPenaltyServed.html",
    "title": "Struct DriveThroughPenaltyServed | F1Sharp",
    "keywords": "Struct DriveThroughPenaltyServed Namespace F1Sharp.Packets Assembly F1Sharp.dll Drive through served event public struct DriveThroughPenaltyServed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car serving the drive through public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.EventDetails.html": {
    "href": "api/F1Sharp.Packets.EventDetails.html",
    "title": "Struct EventDetails | F1Sharp",
    "keywords": "Struct EventDetails Namespace F1Sharp.Packets Assembly F1Sharp.dll The event details packet is different for each type of event. public struct EventDetails Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields buttons public Buttons buttons Field Value Buttons driveThroughPenaltyServed public DriveThroughPenaltyServed driveThroughPenaltyServed Field Value DriveThroughPenaltyServed fastestLap public FastestLap fastestLap Field Value FastestLap flashback public Flashback flashback Field Value Flashback overtake public Overtake overtake Field Value Overtake penalty public Penalty penalty Field Value Penalty raceWinner public RaceWinner raceWinner Field Value RaceWinner retirement public Retirement retirement Field Value Retirement sppedTrap public SpeedTrap sppedTrap Field Value SpeedTrap startLights public StartLights startLights Field Value StartLights stopGoPenaltyServed public StopGoPenaltyServed stopGoPenaltyServed Field Value StopGoPenaltyServed teamMateInPits public TeamMateInPits teamMateInPits Field Value TeamMateInPits"
  },
  "api/F1Sharp.Packets.EventPacket.html": {
    "href": "api/F1Sharp.Packets.EventPacket.html",
    "title": "Struct EventPacket | F1Sharp",
    "keywords": "Struct EventPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet gives details of events that happen during the course of a session. public struct EventPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields eventDetails Event details. Should be parsed differently for each event code. public EventDetails eventDetails Field Value EventDetails eventStringCode Event string code public char[] eventStringCode Field Value char[] header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.FastestLap.html": {
    "href": "api/F1Sharp.Packets.FastestLap.html",
    "title": "Struct FastestLap | F1Sharp",
    "keywords": "Struct FastestLap Namespace F1Sharp.Packets Assembly F1Sharp.dll Fastest lap event public struct FastestLap Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields lapTime Lap time in seconds public float lapTime Field Value float vehicleIdx Index of the car that achieved the fastest lap public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.FinalClassificationPacket.html": {
    "href": "api/F1Sharp.Packets.FinalClassificationPacket.html",
    "title": "Struct FinalClassificationPacket | F1Sharp",
    "keywords": "Struct FinalClassificationPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll his packet details the final classification at the end of the race, and the data will match with the post race results screen. This is especially useful for multiplayer games where it is not always possible to send lap times on the final frame because of network delay. public struct FinalClassificationPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields classificationData List of cars public FinalClassificationData[] classificationData Field Value FinalClassificationData[] header Packet header public PacketHeader header Field Value PacketHeader numCars Number of cars in the final classification public byte numCars Field Value byte"
  },
  "api/F1Sharp.Packets.Flashback.html": {
    "href": "api/F1Sharp.Packets.Flashback.html",
    "title": "Struct Flashback | F1Sharp",
    "keywords": "Struct Flashback Namespace F1Sharp.Packets Assembly F1Sharp.dll Flashback event public struct Flashback Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields flashbackFrameIdentifier Frame identifier flashed back to public uint flashbackFrameIdentifier Field Value uint flashbackSessionTime Session time flashed back to public float flashbackSessionTime Field Value float"
  },
  "api/F1Sharp.Packets.html": {
    "href": "api/F1Sharp.Packets.html",
    "title": "Namespace F1Sharp.Packets | F1Sharp",
    "keywords": "Namespace F1Sharp.Packets Structs CarDamagePacket This packet details car damage parameters for all the cars in the race. CarSetupPacket This packet details the car setups for each vehicle in the session. Note that in multiplayer games, other player cars will appear as blank, you will only be able to see your own car setup, regardless of the “Your Telemetry” setting. Spectators will also not be able to see any car setups. CarStatusPacket This packet details car statuses for all the cars in the race. CarTelemetryPacket This packet details telemetry for all the cars in the race. It details various values that would be recorded on the car such as speed, throttle application, DRS etc. Note that the rev light configurations are presented separately as well and will mimic real life driver preferences. EventPacket This packet gives details of events that happen during the course of a session. FinalClassificationPacket his packet details the final classification at the end of the race, and the data will match with the post race results screen. This is especially useful for multiplayer games where it is not always possible to send lap times on the final frame because of network delay. LapDataPacket The lap data packet gives details of all the cars in the session. LobbyInfoPacket This packet details the players currently in a multiplayer lobby. It details each player’s selected car, any AI involved in the game and also the ready status of each of the participants. MotionExPacket The motion packet gives extended data for the car being driven with the goal of being able to drive a motion platform setup. All wheel arrays have the following order: [RL, RR, FL, FR] MotionPacket The motion packet gives physical data for all the cars being driven. ParticipantsPacket This is a list of participants in the race. If the vehicle is controlled by AI, then the name will be the driver name. If this is a multiplayer game, the names will be the Steam Id on PC, or the LAN name if appropriate. On Xbox, the names will always be the driver name. On PlayStation the name will be the LAN name if playing a LAN game, otherwise it will be the driver name. SessionHistoryPacket This packet contains lap times and tyre usage for the session. This packet works slightly differently to other packets. To reduce CPU and bandwidth, each packet relates to a specific vehicle and is sent every 1/20 s, and the vehicle being sent is cycled through. Therefore in a 20 car race you should receive an update for each vehicle at least once per second. Note that at the end of the race, after the final classification packet has been sent, a final bulk update of all the session histories for the vehicles in that session will be sent. SessionPacket The session packet includes details about the current session in progress TyreSetPacket This packets gives a more in-depth details about tyre sets assigned to a vehicle during the session."
  },
  "api/F1Sharp.Packets.LapData.html": {
    "href": "api/F1Sharp.Packets.LapData.html",
    "title": "Struct LapData | F1Sharp",
    "keywords": "Struct LapData Namespace F1Sharp.Packets Assembly F1Sharp.dll Lap data for a car public struct LapData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carPosition Car race position public byte carPosition Field Value byte cornerCuttingWarnings Accumulated number of corner cutting warnings issued public byte cornerCuttingWarnings Field Value byte currentLapInvalid Indicates if the current lap is invalid 0 = valid; 1 = invalid public byte currentLapInvalid Field Value byte currentLapNum Current lap number public byte currentLapNum Field Value byte currentLapTimeInMS Current time around the lap in milliseconds public uint currentLapTimeInMS Field Value uint deltaToCarInFrontInMS Time delta to car in front in milliseconds public ushort deltaToCarInFrontInMS Field Value ushort deltaToRaceLeaderInMS Time delta to race leader in milliseconds public ushort deltaToRaceLeaderInMS Field Value ushort driverStatus Status of the driver public DriverStatus driverStatus Field Value DriverStatus gridPosition Grid position the car started the race in public byte gridPosition Field Value byte lapDistance Distance car is around the current lap in meters. Could be negative if line hasn't been crossed yet. public float lapDistance Field Value float lastLapTimeInMS Last lap time in milliseconds public uint lastLapTimeInMS Field Value uint numUnservedDriveThroughPens Number of drive through penalties left to serve public byte numUnservedDriveThroughPens Field Value byte numUnservedStopGoPens Number of stop & go penalties left to serve public byte numUnservedStopGoPens Field Value byte penalties Accumulated time penalties in seconds to be added public byte penalties Field Value byte pitLaneTimeInLaneInMS If timer is active, the current time spent in the pit lane in milliseconds public ushort pitLaneTimeInLaneInMS Field Value ushort pitLaneTimerActive Pit lane timing 0 = inactive; 1 = active public byte pitLaneTimerActive Field Value byte pitStatus Pit status of the car public PitStatus pitStatus Field Value PitStatus pitStopShouldServePen Whether the car should serve a penalty at this stop public byte pitStopShouldServePen Field Value byte pitStopTimerInMS Time of the actual pit stop in milliseconds public ushort pitStopTimerInMS Field Value ushort resultStatus Result of the driver public ResultStatus resultStatus Field Value ResultStatus safetyCarDelta Delta in seconds for safety car public float safetyCarDelta Field Value float sector Sector the car is in public Sector sector Field Value Sector sector1TimeInMS Sector 1 time in milliseconds public ushort sector1TimeInMS Field Value ushort sector1TimeMinutes Sector 1 whole minute part public byte sector1TimeMinutes Field Value byte sector2TimeInMS Sector 2 time in milliseconds public ushort sector2TimeInMS Field Value ushort sector2TimeMinutes Sector 2 whole minute part public ushort sector2TimeMinutes Field Value ushort totalDistance Total distance travelled in session in meters. Could be negative if line hasn't been crossed yet. public float totalDistance Field Value float totalWarnings Accumulated number of warnings issued public byte totalWarnings Field Value byte"
  },
  "api/F1Sharp.Packets.LapDataPacket.html": {
    "href": "api/F1Sharp.Packets.LapDataPacket.html",
    "title": "Struct LapDataPacket | F1Sharp",
    "keywords": "Struct LapDataPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll The lap data packet gives details of all the cars in the session. public struct LapDataPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields header Packet header public PacketHeader header Field Value PacketHeader lapData Lap data for all cars on track public LapData[] lapData Field Value LapData[] timeTrialPBCarIdx Index of Personal Best car in time trial (255 if invalid) public byte timeTrialPBCarIdx Field Value byte timeTrialRivalCarIdx Index of Rival Car in time trial (255 if invalid) public byte timeTrialRivalCarIdx Field Value byte"
  },
  "api/F1Sharp.Packets.LobbyInfoPacket.html": {
    "href": "api/F1Sharp.Packets.LobbyInfoPacket.html",
    "title": "Struct LobbyInfoPacket | F1Sharp",
    "keywords": "Struct LobbyInfoPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet details the players currently in a multiplayer lobby. It details each player’s selected car, any AI involved in the game and also the ready status of each of the participants. public struct LobbyInfoPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields header Packet header public PacketHeader header Field Value PacketHeader lobbyPlayers List of players in the lobby public LobbyInfoData[] lobbyPlayers Field Value LobbyInfoData[] numPlayers Number of players in the lobby public byte numPlayers Field Value byte"
  },
  "api/F1Sharp.Packets.MarshalZone.html": {
    "href": "api/F1Sharp.Packets.MarshalZone.html",
    "title": "Struct MarshalZone | F1Sharp",
    "keywords": "Struct MarshalZone Namespace F1Sharp.Packets Assembly F1Sharp.dll Data for the marshal zone public struct MarshalZone Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields zoneFlag Flag currently displayed on the zone public ZoneFlag zoneFlag Field Value ZoneFlag zoneStart Fraction (0..1) of the way through the lap the marshall zone starts public float zoneStart Field Value float"
  },
  "api/F1Sharp.Packets.MotionData.html": {
    "href": "api/F1Sharp.Packets.MotionData.html",
    "title": "Struct MotionData | F1Sharp",
    "keywords": "Struct MotionData Namespace F1Sharp.Packets Assembly F1Sharp.dll Motion data for a car public struct MotionData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields gForceLateral Lateral G-Force component public float gForceLateral Field Value float gForceLongitudinal Longitudinal G-Force component public float gForceLongitudinal Field Value float gForceVertical Vertical G-Force component public float gForceVertical Field Value float pitch Pitch angle (in radians) public float pitch Field Value float roll Roll angle (in radians) public float roll Field Value float worldForwardDirX World space forward X direction (normalised) public short worldForwardDirX Field Value short worldForwardDirY World space forward Y direction (normalised) public short worldForwardDirY Field Value short worldForwardDirZ World space forward Z direction (normalised) public short worldForwardDirZ Field Value short worldPositionX World space X position (in meters) public float worldPositionX Field Value float worldPositionY World space Y position (in meters) public float worldPositionY Field Value float worldPositionZ World space Z position (in meters) public float worldPositionZ Field Value float worldRightDirX World space right X direction (normalised) public short worldRightDirX Field Value short worldRightDirY World space right Y direction (normalised) public short worldRightDirY Field Value short worldRightDirZ World space right Z direction (normalised) public short worldRightDirZ Field Value short worldVelocityX Velocity in world space X (in meters per second) public float worldVelocityX Field Value float worldVelocityY Velocity in world space Y (in meters per second) public float worldVelocityY Field Value float worldVelocityZ Velocity in world space Z (in meters per second) public float worldVelocityZ Field Value float yaw Yaw angle (in radians) public float yaw Field Value float"
  },
  "api/F1Sharp.Packets.MotionExPacket.html": {
    "href": "api/F1Sharp.Packets.MotionExPacket.html",
    "title": "Struct MotionExPacket | F1Sharp",
    "keywords": "Struct MotionExPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll The motion packet gives extended data for the car being driven with the goal of being able to drive a motion platform setup. All wheel arrays have the following order: [RL, RR, FL, FR] public struct MotionExPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields angularAccelerationX Angular acceleration X component in radians per second squared public float angularAccelerationX Field Value float angularAccelerationY Angular acceleration Y component in radians per second squared public float angularAccelerationY Field Value float angularAccelerationZ Angular acceleration Z component in radians per second squared public float angularAccelerationZ Field Value float angularVelocityX Angular velocity X component in radians per second public float angularVelocityX Field Value float angularVelocityY Angular velocity Y component in radians per second public float angularVelocityY Field Value float angularVelocityZ Angular velocity Z component in radians per second public float angularVelocityZ Field Value float frontWheelsAngle Current front wheels angle in radians public float frontWheelsAngle Field Value float header Packet header public PacketHeader header Field Value PacketHeader heightOfCOGAboveGround Height of center of gravity above ground public float heightOfCOGAboveGround Field Value float localVelocityX Velocity in local space X in meters per second public float localVelocityX Field Value float localVelocityY Velocity in local space Y in meters per second public float localVelocityY Field Value float localVelocityZ Velocity in local space Z in meters per second public float localVelocityZ Field Value float suspensionAcceleration Suspension acceleration for each wheel public float[] suspensionAcceleration Field Value float[] suspensionPosition Suspension position for each wheel public float[] suspensionPosition Field Value float[] suspensionVelocity Suspension velocity for each wheel public float[] suspensionVelocity Field Value float[] wheelLatForce Lateral forces for each wheel public float[] wheelLatForce Field Value float[] wheelLongForce Longitudinal forces for each wheel public float[] wheelLongForce Field Value float[] wheelSlipAngle Slip angles for each wheel public float[] wheelSlipAngle Field Value float[] wheelSlipRatio Slip ratio for each wheel public float[] wheelSlipRatio Field Value float[] wheelSpeed Speed of each wheel public float[] wheelSpeed Field Value float[] wheelVertForce Vertical forces for each wheel public float[] wheelVertForce Field Value float[]"
  },
  "api/F1Sharp.Packets.MotionPacket.html": {
    "href": "api/F1Sharp.Packets.MotionPacket.html",
    "title": "Struct MotionPacket | F1Sharp",
    "keywords": "Struct MotionPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll The motion packet gives physical data for all the cars being driven. public struct MotionPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carMotionData Motion data for all cars on track public MotionData[] carMotionData Field Value MotionData[] header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.Overtake.html": {
    "href": "api/F1Sharp.Packets.Overtake.html",
    "title": "Struct Overtake | F1Sharp",
    "keywords": "Struct Overtake Namespace F1Sharp.Packets Assembly F1Sharp.dll Overtake event public struct Overtake Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields beingOvertakenVehicleIdx Index of the car being overtaken public byte beingOvertakenVehicleIdx Field Value byte overtakingVehicleIdx Index of the car overtaking public byte overtakingVehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.ParticipantData.html": {
    "href": "api/F1Sharp.Packets.ParticipantData.html",
    "title": "Struct ParticipantData | F1Sharp",
    "keywords": "Struct ParticipantData Namespace F1Sharp.Packets Assembly F1Sharp.dll Data for each participant public struct ParticipantData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aiControlled Whether the car is controlled by the AI (1) or the human (0) public byte aiControlled Field Value byte driverId Driver ID. 255 if network human. public byte driverId Field Value byte myTeam Whether it's My Team (1) or otherwise (0) public byte myTeam Field Value byte name Name of the participant public char[] name Field Value char[] nationality Nationality of the driver public byte nationality Field Value byte networkId Unique identifier for network players public byte networkId Field Value byte platform Platform of the player public Platform platform Field Value Platform raceNumber Race number of the car public byte raceNumber Field Value byte showOnlineNames Player's \"show online names\" setting 0 = off; 1 = on public byte showOnlineNames Field Value byte teamId Team ID public byte teamId Field Value byte yourTelemetry Player's UDP setting 0 = restricted; 1 = public public byte yourTelemetry Field Value byte"
  },
  "api/F1Sharp.Packets.ParticipantsPacket.html": {
    "href": "api/F1Sharp.Packets.ParticipantsPacket.html",
    "title": "Struct ParticipantsPacket | F1Sharp",
    "keywords": "Struct ParticipantsPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This is a list of participants in the race. If the vehicle is controlled by AI, then the name will be the driver name. If this is a multiplayer game, the names will be the Steam Id on PC, or the LAN name if appropriate. On Xbox, the names will always be the driver name. On PlayStation the name will be the LAN name if playing a LAN game, otherwise it will be the driver name. public struct ParticipantsPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields header Packet header public PacketHeader header Field Value PacketHeader numActiveCars Number of active cars (should match number of cars in HUD) public byte numActiveCars Field Value byte participants List of participants public ParticipantData[] participants Field Value ParticipantData[]"
  },
  "api/F1Sharp.Packets.Penalty.html": {
    "href": "api/F1Sharp.Packets.Penalty.html",
    "title": "Struct Penalty | F1Sharp",
    "keywords": "Struct Penalty Namespace F1Sharp.Packets Assembly F1Sharp.dll Penalty event public struct Penalty Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields infringementType Infringement type public byte infringementType Field Value byte lapNum Lap the penalty ocurred on public byte lapNum Field Value byte otherVehicleIdx Index of the other car involved public byte otherVehicleIdx Field Value byte penaltyType Penalty type public byte penaltyType Field Value byte placesGained Number of places gained by this public byte placesGained Field Value byte time Time gained or time spent doing action in seconds public byte time Field Value byte vehicleIdx Index of the car the penalty is applied to public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.RaceWinner.html": {
    "href": "api/F1Sharp.Packets.RaceWinner.html",
    "title": "Struct RaceWinner | F1Sharp",
    "keywords": "Struct RaceWinner Namespace F1Sharp.Packets Assembly F1Sharp.dll Race winner event public struct RaceWinner Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car that won the race public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.Retirement.html": {
    "href": "api/F1Sharp.Packets.Retirement.html",
    "title": "Struct Retirement | F1Sharp",
    "keywords": "Struct Retirement Namespace F1Sharp.Packets Assembly F1Sharp.dll Car retirement event public struct Retirement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car retiring public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.SessionHistoryPacket.html": {
    "href": "api/F1Sharp.Packets.SessionHistoryPacket.html",
    "title": "Struct SessionHistoryPacket | F1Sharp",
    "keywords": "Struct SessionHistoryPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packet contains lap times and tyre usage for the session. This packet works slightly differently to other packets. To reduce CPU and bandwidth, each packet relates to a specific vehicle and is sent every 1/20 s, and the vehicle being sent is cycled through. Therefore in a 20 car race you should receive an update for each vehicle at least once per second. Note that at the end of the race, after the final classification packet has been sent, a final bulk update of all the session histories for the vehicles in that session will be sent. public struct SessionHistoryPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields bestLapTimeLapNum Lap the best lap time was achieved on public byte bestLapTimeLapNum Field Value byte bestSector1Lapnum Lap the best sector 1 time was achieved on public byte bestSector1Lapnum Field Value byte bestSector2Lapnum Lap the best sector 2 time was achieved on public byte bestSector2Lapnum Field Value byte bestSector3Lapnum Lap the best sector 3 time was achieved on public byte bestSector3Lapnum Field Value byte carIdx Index of the car this lap data relates to public byte carIdx Field Value byte header Packet header public PacketHeader header Field Value PacketHeader lapHistoryData Lap history. 100 laps max. public LapHistoryData[] lapHistoryData Field Value LapHistoryData[] numLaps Number of laps in the data (including current partial lap) public byte numLaps Field Value byte numTyreStints Number of tyre stints in the data public byte numTyreStints Field Value byte tyreStintHistoryData Stint history public TyreStintHistoryData[] tyreStintHistoryData Field Value TyreStintHistoryData[]"
  },
  "api/F1Sharp.Packets.SessionPacket.html": {
    "href": "api/F1Sharp.Packets.SessionPacket.html",
    "title": "Struct SessionPacket | F1Sharp",
    "keywords": "Struct SessionPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll The session packet includes details about the current session in progress public struct SessionPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields aiDifficulty AI difficulty rating (0..110) public byte aiDifficulty Field Value byte airTemperature Air temperature in degrees Celsius public sbyte airTemperature Field Value sbyte brakingAssist public byte brakingAssist Field Value byte drsAssist public byte drsAssist Field Value byte dynamicRacingLine public byte dynamicRacingLine Field Value byte dynamicRacingLineType public byte dynamicRacingLineType Field Value byte ersAssist public byte ersAssist Field Value byte forecastAccuracy Accuracy of the forecast 0 = perfect; 1 = approximate public byte forecastAccuracy Field Value byte formula Type of the cars in the session public Formula formula Field Value Formula gameMode Current game mode public GameMode gameMode Field Value GameMode gamePaused Whether the game is paused (network game only) public byte gamePaused Field Value byte gearboxAssist public byte gearboxAssist Field Value byte header Packet header public PacketHeader header Field Value PacketHeader isSpectating Whether the player is spectating public byte isSpectating Field Value byte marshalZones List of marshal zones public MarshalZone[] marshalZones Field Value MarshalZone[] networkGame Indicates if it's a network game. 0 = offline; 1 = online public byte networkGame Field Value byte numMarshalZones Number of marshal zones to follow public byte numMarshalZones Field Value byte numRedFlagPeriods Number of red flag periods public byte numRedFlagPeriods Field Value byte numSafetyCarPeriods Number of safety car periods public byte numSafetyCarPeriods Field Value byte numVirtualSafetyCarPeriods Number of virtual safety car periods public byte numVirtualSafetyCarPeriods Field Value byte numWeatherForecastSamples Number of weather samples to follow public byte numWeatherForecastSamples Field Value byte pitAssist public byte pitAssist Field Value byte pitReleaseAssist public byte pitReleaseAssist Field Value byte pitSpeedLimit Pit speed limit in kilometers per hour public byte pitSpeedLimit Field Value byte pitStopRejoinPosition Predicted position to rejoin at (player) public byte pitStopRejoinPosition Field Value byte pitStopWindowIdealLap Ideal lap to pit on for current strategy (player) public byte pitStopWindowIdealLap Field Value byte pitStopWindowLatestLap Latest lap to pit on for current strategy (player) public byte pitStopWindowLatestLap Field Value byte ruleSet Current rule set public RuleSet ruleSet Field Value RuleSet safetyCarStatus Safety car status public SafetyCarStatus safetyCarStatus Field Value SafetyCarStatus seasonLinkIdentifier Identifier for season (persist accross saves) public uint seasonLinkIdentifier Field Value uint sessionDuration Session duration in seconds public ushort sessionDuration Field Value ushort sessionLinkIdentifier Identifier for session (persist accross saves) public uint sessionLinkIdentifier Field Value uint sessionTimeLeft Time left in session in seconds public ushort sessionTimeLeft Field Value ushort sessionType Type of the session public Session sessionType Field Value Session sessionlength Length of the session public SessionLength sessionlength Field Value SessionLength sliProNativeSupport SLI pro support. 0 = inactive; 1 = active public byte sliProNativeSupport Field Value byte spectatorCarIndex The index of the car being spectated public byte spectatorCarIndex Field Value byte speedUnitsLeadPlayer Speed unit selected by the player (splitscreen) public SpeedUnit speedUnitsLeadPlayer Field Value SpeedUnit speedUnitsSecondaryPlayer Speed unit selected by the secondary player (splitscreen) public SpeedUnit speedUnitsSecondaryPlayer Field Value SpeedUnit steeringAssist public byte steeringAssist Field Value byte temperatureUnitsLeadPlayer Temperature unit selected by the player (splitscreen) public TemperatureUnit temperatureUnitsLeadPlayer Field Value TemperatureUnit temperatureUnitsSecondaryPlayer Temperature unit selected by the secondary player (splitscreen) public TemperatureUnit temperatureUnitsSecondaryPlayer Field Value TemperatureUnit timeOfDay Local time of day - minutes since midnight public uint timeOfDay Field Value uint totalLaps Total number of laps in this race public byte totalLaps Field Value byte trackId Identifier for the track the session is taking place public Track trackId Field Value Track trackLength Track length in meters public ushort trackLength Field Value ushort trackTemperature Track temperature in degrees Celsius public sbyte trackTemperature Field Value sbyte weather Current weather type public Weather weather Field Value Weather weatherForecastSamples List of weather samples public WeatherForecastSample[] weatherForecastSamples Field Value WeatherForecastSample[] weekendLinkIdentifier Identifier for weekend (persist accross saves) public uint weekendLinkIdentifier Field Value uint"
  },
  "api/F1Sharp.Packets.SpeedTrap.html": {
    "href": "api/F1Sharp.Packets.SpeedTrap.html",
    "title": "Struct SpeedTrap | F1Sharp",
    "keywords": "Struct SpeedTrap Namespace F1Sharp.Packets Assembly F1Sharp.dll Speed trap event public struct SpeedTrap Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields fastestSpeedInSession Speed of the fastest car in the session public float fastestSpeedInSession Field Value float fastestVehicleIdxInSession Index of the fastest car in the session public byte fastestVehicleIdxInSession Field Value byte isDriverFastestInSession Fastest speed for driver in session 1 = in session; 0 = otherwise public byte isDriverFastestInSession Field Value byte isOverallFastestInSession Overall fastest speed in session 1 = in session; 0 = otherwise public byte isOverallFastestInSession Field Value byte speed Top speed achieved in kilometers per hour public float speed Field Value float vehicleIdx Index of the car triggering the event public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.StartLights.html": {
    "href": "api/F1Sharp.Packets.StartLights.html",
    "title": "Struct StartLights | F1Sharp",
    "keywords": "Struct StartLights Namespace F1Sharp.Packets Assembly F1Sharp.dll Start lights event public struct StartLights Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields numLights Number of lights showing public byte numLights Field Value byte"
  },
  "api/F1Sharp.Packets.StopGoPenaltyServed.html": {
    "href": "api/F1Sharp.Packets.StopGoPenaltyServed.html",
    "title": "Struct StopGoPenaltyServed | F1Sharp",
    "keywords": "Struct StopGoPenaltyServed Namespace F1Sharp.Packets Assembly F1Sharp.dll Stop & go served event public struct StopGoPenaltyServed Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car serving the stop & go public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.TeamMateInPits.html": {
    "href": "api/F1Sharp.Packets.TeamMateInPits.html",
    "title": "Struct TeamMateInPits | F1Sharp",
    "keywords": "Struct TeamMateInPits Namespace F1Sharp.Packets Assembly F1Sharp.dll Team mate in pits event public struct TeamMateInPits Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields vehicleIdx Index of the car in pits public byte vehicleIdx Field Value byte"
  },
  "api/F1Sharp.Packets.TyreSetPacket.html": {
    "href": "api/F1Sharp.Packets.TyreSetPacket.html",
    "title": "Struct TyreSetPacket | F1Sharp",
    "keywords": "Struct TyreSetPacket Namespace F1Sharp.Packets Assembly F1Sharp.dll This packets gives a more in-depth details about tyre sets assigned to a vehicle during the session. public struct TyreSetPacket Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields carIdx Index of the car the data relates to public byte carIdx Field Value byte data Tyre set data 13 dry + 7 wet public TyreSetData[] data Field Value TyreSetData[] fittedIdx Index into array of fitted tyre public byte fittedIdx Field Value byte header Packet header public PacketHeader header Field Value PacketHeader"
  },
  "api/F1Sharp.Packets.WeatherForecastSample.html": {
    "href": "api/F1Sharp.Packets.WeatherForecastSample.html",
    "title": "Struct WeatherForecastSample | F1Sharp",
    "keywords": "Struct WeatherForecastSample Namespace F1Sharp.Packets Assembly F1Sharp.dll Data for the forecast sample public struct WeatherForecastSample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields airTemperature Air temperature in degrees Celsius public sbyte airTemperature Field Value sbyte rainPercentage Air temperature change. 0 = up; 1 = down; 2 = no change public byte rainPercentage Field Value byte sessionType Type of the session public Session sessionType Field Value Session timeOffset Time in minutes the forecast is for public byte timeOffset Field Value byte trackTemperature Track temperature in degrees Celsius public sbyte trackTemperature Field Value sbyte trackTemperatureChange Track temperature change. 0 = up; 1 = down; 2 = no change public sbyte trackTemperatureChange Field Value sbyte weather Weather type public Weather weather Field Value Weather"
  },
  "api/F1Sharp.PacketType.html": {
    "href": "api/F1Sharp.PacketType.html",
    "title": "Enum PacketType | F1Sharp",
    "keywords": "Enum PacketType Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the packets public enum PacketType : byte Fields CAR_DAMAGE = 10 Damage status for all cars CAR_SETUPS = 5 Packet detailing car setups for cars in the race CAR_STATUS = 7 Status data for all cars CAR_TELEMETRY = 6 Telemetry data for all cars EVENT = 3 Various notable events that happen during a session FINAL_CLASSIFICATION = 8 Final classification confirmation at the end of a race LAP_DATA = 2 Data about all the lap times of cars in the session LOBBY_INFO = 9 Information about players in a multiplayer lobby MOTION = 0 Contains all motion data for player’s car – only sent while player is in control MOTION_EX = 13 Extended motion data for player car PARTICIPANTS = 4 List of participants in the session, mostly relevant for multiplayer SESSION = 1 Data about the session – track, time left SESSION_HISTORY = 11 Lap and tyre data for session TYRE_SET = 12 Extended tyre set data"
  },
  "api/F1Sharp.PenaltyType.html": {
    "href": "api/F1Sharp.PenaltyType.html",
    "title": "Enum PenaltyType | F1Sharp",
    "keywords": "Enum PenaltyType Namespace F1Sharp Assembly F1Sharp.dll Identifier for the penalty types public enum PenaltyType : byte Fields BLACK_FLAG_TIMER = 17 Black flag timer DISQUALIFIED = 6 Disqualified DRIVE_THROUGH = 0 Drive through GRID_PENALTY = 2 Grid penalty PARKED_TOO_LONG_TIMER = 8 Parked too long timer PENALTY_REMINDER = 3 Penalty reminder REMOVED_FROM_FL = 7 Removed from formation lap RETIRED = 16 Retired STOP_GO = 1 Stop & go THIS_AND_NEXT_LAP_INVALIDATED = 11 This and next lap invalidated THIS_AND_NEXT_LAP_INVALIDATED_WITHOUT_REASON = 13 This and next lap invalidated without reason THIS_AND_PREVIOUS_LAP_INVALIDATED = 14 This and previous lap invalidated THIS_AND_PREVIOUS_LAP_INVALIDATED_WITHOUT_REASON = 15 This and previous lap invalidated wihout reason THIS_LAP_INVALIDATED = 10 This lap invalidated THIS_LAP_INVALIDATED_WITHOUT_REASON = 12 This lap invalidated without reason TIME_PENALTY = 4 Time penalty TYRE_REGULATIONS = 9 Tyre regulations WARNING = 5 Warning"
  },
  "api/F1Sharp.PitStatus.html": {
    "href": "api/F1Sharp.PitStatus.html",
    "title": "Enum PitStatus | F1Sharp",
    "keywords": "Enum PitStatus Namespace F1Sharp Assembly F1Sharp.dll Identifier for the pit status public enum PitStatus Fields IN_PIT_AREA = 2 In pit area NONE = 0 Not in the pits PITTING = 1 Pitting"
  },
  "api/F1Sharp.Platform.html": {
    "href": "api/F1Sharp.Platform.html",
    "title": "Enum Platform | F1Sharp",
    "keywords": "Enum Platform Namespace F1Sharp Assembly F1Sharp.dll Identifier for the player's platform public enum Platform : byte Fields ORIGIN = 6 PLAYSTATION = 3 STEAM = 1 UNKNOWN = 255 XBOX = 4"
  },
  "api/F1Sharp.ResultStatus.html": {
    "href": "api/F1Sharp.ResultStatus.html",
    "title": "Enum ResultStatus | F1Sharp",
    "keywords": "Enum ResultStatus Namespace F1Sharp Assembly F1Sharp.dll Identifier for the result status public enum ResultStatus : byte Fields ACTIVE = 2 Active DNF = 4 Did not finish DSQ = 5 Disqualified FINISHED = 3 Finished INACTIVE = 1 Inactive INVALID = 0 Invalid NOT_QUALIFIED = 6 Not qualified RETIRED = 7 Retired"
  },
  "api/F1Sharp.RuleSet.html": {
    "href": "api/F1Sharp.RuleSet.html",
    "title": "Enum RuleSet | F1Sharp",
    "keywords": "Enum RuleSet Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the rule sets public enum RuleSet : byte Fields AUTOCROSS = 8 AVERAGE_SPEED_ZONE = 10 CHECKPOINT_CHALLENGE = 6 DRIFT = 9 PRACTICE_QUALIFYING = 0 RACE = 1 RIVAL_DUEL = 11 TIME_ATTACK = 4 TIME_TRIAL = 2"
  },
  "api/F1Sharp.SafetyCarStatus.html": {
    "href": "api/F1Sharp.SafetyCarStatus.html",
    "title": "Enum SafetyCarStatus | F1Sharp",
    "keywords": "Enum SafetyCarStatus Namespace F1Sharp Assembly F1Sharp.dll Status code for the Safety Car public enum SafetyCarStatus : byte Fields FORMATION_LAP = 3 Formation lap FULL = 1 Safety car period NONE = 0 None VSC = 2 Virtual safety car period"
  },
  "api/F1Sharp.Sector.html": {
    "href": "api/F1Sharp.Sector.html",
    "title": "Enum Sector | F1Sharp",
    "keywords": "Enum Sector Namespace F1Sharp Assembly F1Sharp.dll Identifier for the sectors public enum Sector : byte Fields SECTOR1 = 0 Sector 1 SECTOR2 = 1 Sector 2 SECTOR3 = 2 Sector 3"
  },
  "api/F1Sharp.Session.html": {
    "href": "api/F1Sharp.Session.html",
    "title": "Enum Session | F1Sharp",
    "keywords": "Enum Session Namespace F1Sharp Assembly F1Sharp.dll Codes for the type of the sessions public enum Session : byte Fields OSQ = 9 One shot qualifying P1 = 1 Practice 1 P2 = 2 Practice 2 P3 = 3 Practice 3 Q1 = 5 Qualifying 1 Q2 = 6 Qualifying 2 Q3 = 7 Qualifying 3 R = 10 Race R1 = 11 Sprint race R2 = 12 Race (after sprint) SP = 4 Short practice SQ = 8 Short qualifying TT = 13 Time trial UNKNOWN = 0 Unknown"
  },
  "api/F1Sharp.SessionLength.html": {
    "href": "api/F1Sharp.SessionLength.html",
    "title": "Enum SessionLength | F1Sharp",
    "keywords": "Enum SessionLength Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the session length public enum SessionLength : byte Fields FULL = 7 100% LONG = 6 50% MEDIUM = 4 25% MEDIUM_LONG = 5 35% NONE = 0 SHORT = 3 5 laps VERY_SHORT = 2 3 laps"
  },
  "api/F1Sharp.SpeedUnit.html": {
    "href": "api/F1Sharp.SpeedUnit.html",
    "title": "Enum SpeedUnit | F1Sharp",
    "keywords": "Enum SpeedUnit Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the speed units public enum SpeedUnit : byte Fields KPH = 1 Kilometers per hour MPH = 0 Miles per hour"
  },
  "api/F1Sharp.SurfaceType.html": {
    "href": "api/F1Sharp.SurfaceType.html",
    "title": "Enum SurfaceType | F1Sharp",
    "keywords": "Enum SurfaceType Namespace F1Sharp Assembly F1Sharp.dll Identifier for surface types public enum SurfaceType : byte Fields COBBLESTONE = 9 CONCRETE = 2 GRASS = 7 GRAVEL = 4 METAL = 10 MUD = 5 RIDGED = 11 ROCK = 3 RUMBLE_STRIP = 1 SAND = 6 TARMAC = 0 WATER = 8"
  },
  "api/F1Sharp.TelemetryClient.CarDamageDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.CarDamageDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.CarDamageDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.CarDamageDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.CarDamageDataReceiveDelegate(CarDamagePacket packet) Parameters packet CarDamagePacket"
  },
  "api/F1Sharp.TelemetryClient.CarSetupDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.CarSetupDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.CarSetupDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.CarSetupDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.CarSetupDataReceiveDelegate(CarSetupPacket packet) Parameters packet CarSetupPacket"
  },
  "api/F1Sharp.TelemetryClient.CarStatusDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.CarStatusDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.CarStatusDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.CarStatusDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.CarStatusDataReceiveDelegate(CarStatusPacket packet) Parameters packet CarStatusPacket"
  },
  "api/F1Sharp.TelemetryClient.CarTelemetryDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.CarTelemetryDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.CarTelemetryDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.CarTelemetryDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.CarTelemetryDataReceiveDelegate(CarTelemetryPacket packet) Parameters packet CarTelemetryPacket"
  },
  "api/F1Sharp.TelemetryClient.ConnectedStatusChangeDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.ConnectedStatusChangeDelegate.html",
    "title": "Delegate TelemetryClient.ConnectedStatusChangeDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.ConnectedStatusChangeDelegate Namespace F1Sharp Assembly F1Sharp.dll Connection status change delegate public delegate void TelemetryClient.ConnectedStatusChangeDelegate(bool connected) Parameters connected bool True if connected, False if disconnected"
  },
  "api/F1Sharp.TelemetryClient.EventDetailsReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.EventDetailsReceiveDelegate.html",
    "title": "Delegate TelemetryClient.EventDetailsReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.EventDetailsReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.EventDetailsReceiveDelegate(EventPacket packet) Parameters packet EventPacket"
  },
  "api/F1Sharp.TelemetryClient.FinalClassificationDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.FinalClassificationDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.FinalClassificationDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.FinalClassificationDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.FinalClassificationDataReceiveDelegate(FinalClassificationPacket packet) Parameters packet FinalClassificationPacket"
  },
  "api/F1Sharp.TelemetryClient.html": {
    "href": "api/F1Sharp.TelemetryClient.html",
    "title": "Class TelemetryClient | F1Sharp",
    "keywords": "Class TelemetryClient Namespace F1Sharp Assembly F1Sharp.dll public class TelemetryClient Inheritance object TelemetryClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TelemetryClient(int) Constructs client and sets it up for receiving data public TelemetryClient(int port) Parameters port int The port to listen to. This must match your game setting. Properties Connected Indicates if we're currently connected public bool Connected { get; } Property Value bool Events OnCarDamageDataReceive public event TelemetryClient.CarDamageDataReceiveDelegate OnCarDamageDataReceive Event Type TelemetryClient.CarDamageDataReceiveDelegate OnCarSetupDataReceive public event TelemetryClient.CarSetupDataReceiveDelegate OnCarSetupDataReceive Event Type TelemetryClient.CarSetupDataReceiveDelegate OnCarStatusDataReceive public event TelemetryClient.CarStatusDataReceiveDelegate OnCarStatusDataReceive Event Type TelemetryClient.CarStatusDataReceiveDelegate OnCarTelemetryDataReceive public event TelemetryClient.CarTelemetryDataReceiveDelegate OnCarTelemetryDataReceive Event Type TelemetryClient.CarTelemetryDataReceiveDelegate OnConnectedStatusChange Called when connect status changes public event TelemetryClient.ConnectedStatusChangeDelegate OnConnectedStatusChange Event Type TelemetryClient.ConnectedStatusChangeDelegate OnEventDetailsReceive public event TelemetryClient.EventDetailsReceiveDelegate OnEventDetailsReceive Event Type TelemetryClient.EventDetailsReceiveDelegate OnFinalClassificationDataReceive public event TelemetryClient.FinalClassificationDataReceiveDelegate OnFinalClassificationDataReceive Event Type TelemetryClient.FinalClassificationDataReceiveDelegate OnLapDataReceive public event TelemetryClient.LapDataReceiveDelegate OnLapDataReceive Event Type TelemetryClient.LapDataReceiveDelegate OnLobbyInfoDataReceive public event TelemetryClient.LobbyInfoDataReceiveDelegate OnLobbyInfoDataReceive Event Type TelemetryClient.LobbyInfoDataReceiveDelegate OnMotionDataReceive public event TelemetryClient.MotionDataReceiveDelegate OnMotionDataReceive Event Type TelemetryClient.MotionDataReceiveDelegate OnMotionExDataReceive public event TelemetryClient.MotionExDataReceiveDelegate OnMotionExDataReceive Event Type TelemetryClient.MotionExDataReceiveDelegate OnParticipantsDataReceive public event TelemetryClient.ParticipantsDataReceiveDelegate OnParticipantsDataReceive Event Type TelemetryClient.ParticipantsDataReceiveDelegate OnSessionDataReceive public event TelemetryClient.SessionDataReceiveDelegate OnSessionDataReceive Event Type TelemetryClient.SessionDataReceiveDelegate OnSessionHistoryDataReceive public event TelemetryClient.SessionHistoryDataReceiveDelegate OnSessionHistoryDataReceive Event Type TelemetryClient.SessionHistoryDataReceiveDelegate OnTyreSetDataReceive public event TelemetryClient.TyreSetDataReceiveDelegate OnTyreSetDataReceive Event Type TelemetryClient.TyreSetDataReceiveDelegate"
  },
  "api/F1Sharp.TelemetryClient.LapDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.LapDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.LapDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.LapDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.LapDataReceiveDelegate(LapDataPacket packet) Parameters packet LapDataPacket"
  },
  "api/F1Sharp.TelemetryClient.LobbyInfoDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.LobbyInfoDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.LobbyInfoDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.LobbyInfoDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.LobbyInfoDataReceiveDelegate(LobbyInfoPacket packet) Parameters packet LobbyInfoPacket"
  },
  "api/F1Sharp.TelemetryClient.MotionDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.MotionDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.MotionDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.MotionDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.MotionDataReceiveDelegate(MotionPacket packet) Parameters packet MotionPacket"
  },
  "api/F1Sharp.TelemetryClient.MotionExDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.MotionExDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.MotionExDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.MotionExDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.MotionExDataReceiveDelegate(MotionExPacket packet) Parameters packet MotionExPacket"
  },
  "api/F1Sharp.TelemetryClient.ParticipantsDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.ParticipantsDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.ParticipantsDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.ParticipantsDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.ParticipantsDataReceiveDelegate(ParticipantsPacket packet) Parameters packet ParticipantsPacket"
  },
  "api/F1Sharp.TelemetryClient.SessionDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.SessionDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.SessionDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.SessionDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.SessionDataReceiveDelegate(SessionPacket packet) Parameters packet SessionPacket"
  },
  "api/F1Sharp.TelemetryClient.SessionHistoryDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.SessionHistoryDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.SessionHistoryDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.SessionHistoryDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.SessionHistoryDataReceiveDelegate(SessionHistoryPacket packet) Parameters packet SessionHistoryPacket"
  },
  "api/F1Sharp.TelemetryClient.TyreSetDataReceiveDelegate.html": {
    "href": "api/F1Sharp.TelemetryClient.TyreSetDataReceiveDelegate.html",
    "title": "Delegate TelemetryClient.TyreSetDataReceiveDelegate | F1Sharp",
    "keywords": "Delegate TelemetryClient.TyreSetDataReceiveDelegate Namespace F1Sharp Assembly F1Sharp.dll public delegate void TelemetryClient.TyreSetDataReceiveDelegate(TyreSetPacket packet) Parameters packet TyreSetPacket"
  },
  "api/F1Sharp.TemperatureUnit.html": {
    "href": "api/F1Sharp.TemperatureUnit.html",
    "title": "Enum TemperatureUnit | F1Sharp",
    "keywords": "Enum TemperatureUnit Namespace F1Sharp Assembly F1Sharp.dll Identifier for the temperature units public enum TemperatureUnit : byte Fields CELSIUS = 0 Celsius FAHRENHEIT = 1 Fahrenheit"
  },
  "api/F1Sharp.Track.html": {
    "href": "api/F1Sharp.Track.html",
    "title": "Enum Track | F1Sharp",
    "keywords": "Enum Track Namespace F1Sharp Assembly F1Sharp.dll Identifiers for the tracks public enum Track : sbyte Fields ABU_DHABI = 14 AUSTRIA = 17 BAKU = 20 BRAZIL = 16 CATALUNYA = 4 HANOI = 25 HOCKENHEIM = 8 HUNGARORING = 9 IMOLA = 27 JEDDAH = 29 LAS_VEGAS = 31 LOSAIL = 32 MELBOURNE = 0 MEXICO = 19 MIAMI = 30 MONACO = 5 MONTREAL = 6 MONZA = 11 PAUL_RICARD = 1 PORTIMAO = 28 SAKHIR = 3 SAKHIR_SHORT = 21 SHANGHAI = 2 SILVERSTONE = 7 SILVERSTONE_SHORT = 22 SINGAPORE = 12 SOCHI = 18 SPA = 10 SUZUKA = 13 SUZUKA_SHORT = 24 TEXAS = 15 TEXAS_SHORT = 23 UNKNOWN = -1 ZANDVOORT = 26"
  },
  "api/F1Sharp.TyreCompound.html": {
    "href": "api/F1Sharp.TyreCompound.html",
    "title": "Enum TyreCompound | F1Sharp",
    "keywords": "Enum TyreCompound Namespace F1Sharp Assembly F1Sharp.dll Actual tyre compounds public enum TyreCompound : byte Fields C0 = 21 C1 = 20 C2 = 19 C3 = 18 C4 = 17 C5 = 16 CLASSIC_DRY = 9 CLASSIC_WET = 10 F2_HARD = 14 F2_MEDIUM = 13 F2_SOFT = 12 F2_SUPER_SOFT = 11 F2_WET = 15 INTER = 7 WET = 8"
  },
  "api/F1Sharp.VisualTyreCompound.html": {
    "href": "api/F1Sharp.VisualTyreCompound.html",
    "title": "Enum VisualTyreCompound | F1Sharp",
    "keywords": "Enum VisualTyreCompound Namespace F1Sharp Assembly F1Sharp.dll Visual tyre compound public enum VisualTyreCompound : byte Fields CLASSIC_DRY = 9 CLASSIC_WET = 10 F2_HARD = 22 F2_MEDIUM = 21 F2_SOFT = 20 F2_SUPER_SOFT = 19 F2_WET = 15 HARD = 18 INTER = 7 MEDIUM = 17 SOFT = 16 WET = 8"
  },
  "api/F1Sharp.Weather.html": {
    "href": "api/F1Sharp.Weather.html",
    "title": "Enum Weather | F1Sharp",
    "keywords": "Enum Weather Namespace F1Sharp Assembly F1Sharp.dll Codes for the weather public enum Weather : byte Fields CLEAR = 0 Clear skies HEAVY_RAIN = 4 Heavy rain LIGHT_CLOUD = 1 Light clouds LIGHT_RAIN = 3 Light rain OVERCAST = 2 Overcast STORM = 5 Storm"
  },
  "api/F1Sharp.Wheel.html": {
    "href": "api/F1Sharp.Wheel.html",
    "title": "Enum Wheel | F1Sharp",
    "keywords": "Enum Wheel Namespace F1Sharp Assembly F1Sharp.dll Array position of the wheels public enum Wheel : byte Fields FL = 2 Front left FR = 3 Front right RL = 0 Rear left RR = 1 Rear ruight"
  },
  "api/F1Sharp.ZoneFlag.html": {
    "href": "api/F1Sharp.ZoneFlag.html",
    "title": "Enum ZoneFlag | F1Sharp",
    "keywords": "Enum ZoneFlag Namespace F1Sharp Assembly F1Sharp.dll Codes for the flags displayed public enum ZoneFlag : sbyte Fields BLUE = 2 Blue flag GREEN = 1 Green flag NONE = 0 No flag UNKNOWN = -1 Unknown or invalid flag YELLOW = 3 Yellow flag"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "PLACEHOLDER | F1Sharp",
    "keywords": "PLACEHOLDER TODO: Add .NET projects to the src folder and run docfx to generate REAL API Documentation!"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | F1Sharp",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | F1Sharp",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}